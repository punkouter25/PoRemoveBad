@page "/"
@using System.Linq
@inject ITextProcessingService TextProcessingService
@inject IExportService ExportService
@inject ToastService ToastService
@inject IJSRuntime JSRuntime

<PageTitle>PoRemoveBad</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="mb-4">
                <div class="btn-group mb-3" role="group">
                    <input type="radio" class="btn-check" name="dictionaryType" id="default" value="default" checked="@(dictionaryType == "default")" @onchange="@(async () => await SwitchDictionary("default"))" autocomplete="off">
                    <label class="btn btn-outline-primary" for="default">Remove Bad Words</label>

                    <input type="radio" class="btn-check" name="dictionaryType" id="buzzwords" value="buzzwords" checked="@(dictionaryType == "buzzwords")" @onchange="@(async () => await SwitchDictionary("buzzwords"))" autocomplete="off">
                    <label class="btn btn-outline-primary" for="buzzwords">Replace Buzzwords</label>
                </div>

                <h3>Input Text</h3>
                
                <!-- File Upload Input -->
                <div class="mb-3">
                    <label for="fileInput" class="form-label">Or Upload a File (.txt, .md - Max 5MB):</label>
                    <InputFile id="fileInput" class="form-control" OnChange="LoadFile" accept=".txt,.md" />
                </div>

                <textarea class="form-control" rows="8" @bind="inputText" @bind:event="oninput" placeholder="Paste your text here or upload a file..."></textarea>
                <div class="text-muted small mt-1">
                    Characters: @(inputText?.Length ?? 0)
                </div>
            </div>

            <div class="mb-4">
                <button class="btn btn-primary" @onclick="ProcessText" disabled="@(isProcessing || string.IsNullOrWhiteSpace(inputText))">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Processing...</span>
                    }
                    else
                    {
                        <span>Process Text</span>
                    }
                </button>

                <p @onclick="TestClick">Click me to test event handling</p>

                @if (statistics != null)
                {
                    <div class="dropdown ms-2">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            Export Options
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var format in ExportService.GetSupportedFormats())
                            {
                                var metadata = ExportService.GetFormatMetadata(format);
                                <li>
                                    <a class="dropdown-item" href="#" @onclick="() => ExportText(format)" @onclick:preventDefault="true">
                                        <strong>@metadata.DisplayName</strong>
                                        <br>
                                        <small class="text-muted">@metadata.Description</small>
                                    </a>
                                </li>
                            }
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <a class="dropdown-item" href="#" @onclick="ShowBatchExportModal" @onclick:preventDefault="true">
                                    <strong>📦 Batch Export (All Formats)</strong>
                                    <br>
                                    <small class="text-muted">Download all formats in a ZIP file</small>
                                </a>
                            </li>
                        </ul>
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(processedText))
            {
                <div class="mb-4">
                    <h3>Processed Text</h3>
                    <div class="form-control" style="min-height: 200px; white-space: pre-wrap;">
                        @((MarkupString)processedText)
                    </div>
                </div>
            }
        </div>

        <div class="col-md-4">
            @if (statistics != null)
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Statistics</h5>
                    </div>
                    <div class="card-body">
                        <dl class="row mb-0">
                            <dt class="col-sm-7">Total Words:</dt>
                            <dd class="col-sm-5">@statistics.TotalWords</dd>

                            <dt class="col-sm-7">Total Characters:</dt>
                            <dd class="col-sm-5">@statistics.TotalCharacters</dd>

                            <dt class="col-sm-7">Replaced Words:</dt>
                            <dd class="col-sm-5">@statistics.ReplacedWordsCount</dd>

                            <dt class="col-sm-7">Sentences:</dt>
                            <dd class="col-sm-5">@statistics.SentenceCount</dd>

                            <dt class="col-sm-7">Paragraphs:</dt>
                            <dd class="col-sm-5">@statistics.ParagraphCount</dd>

                            <dt class="col-sm-7">Reading Time:</dt>
                            <dd class="col-sm-5">@($"{statistics.ReadingTimeMinutes:F1} min")</dd>

                            <dt class="col-sm-7">Readability (FK):</dt>
                            <dd class="col-sm-5">@($"{statistics.ReadabilityScore:F1}")</dd>
                        </dl>

                        @if (statistics.ReplacementFrequency.Any())
                        {
                            <h6 class="mt-4 mb-3">Top Replaced Words</h6>
                            <ul class="list-unstyled mb-0">
                                @foreach (var word in statistics.ReplacementFrequency.OrderByDescending(x => x.Value).Take(5))
                                {
                                    <li><strong>@word.Key</strong>: @word.Value times</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Batch Export Modal -->
<div class="modal fade" id="batchExportModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Batch Export</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Select the formats you want to include in the batch export:</p>
                <div class="row">
                    @foreach (var format in ExportService.GetSupportedFormats())
                    {
                        var metadata = ExportService.GetFormatMetadata(format);
                        <div class="col-md-6 mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="format_@format" 
                                       @bind="selectedFormats[format]">
                                <label class="form-check-label" for="format_@format">
                                    <strong>@metadata.DisplayName</strong>
                                    <br>
                                    <small class="text-muted">@metadata.Description</small>
                                </label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ExportBatch" data-bs-dismiss="modal" 
                        disabled="@(!selectedFormats.Values.Any(x => x))">
                    @if (isBatchExporting)
                    {
                        <span class="spinner-border spinner-border-sm me-1"></span>
                    }
                    Export Selected Formats
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? inputText;
    private string? processedText;
    private TextStatistics? statistics;
    private bool isProcessing;
    private bool isInitialized;
    private bool isBatchExporting;
    private string dictionaryType = "default";
    private Dictionary<string, bool> selectedFormats = new();
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB limit for uploads

    protected override async Task OnInitializedAsync()
    {
        // Initialize the selected formats dictionary
        foreach (var format in ExportService.GetSupportedFormats())
        {
            selectedFormats[format] = true; // Default to all formats selected
        }

        if (!isInitialized)
        {
            try
            {
                await TextProcessingService.InitializeDictionaryAsync();
                isInitialized = true;
                ToastService.ShowSuccess("Text sanitizer is ready to use!");
            }
            catch (Exception ex)
            {
                ToastService.ShowError("Failed to initialize text sanitizer", "Initialization Error");
                Console.WriteLine($"Error initializing: {ex.Message}");
            }
        }
    }

    private void TestClick()
    {
        Console.WriteLine("TestClick was called!");
    }

    private async Task SwitchDictionary(string newType)
    {
        try
        {
            dictionaryType = newType;
            await TextProcessingService.InitializeDictionaryAsync(newType);
            ToastService.ShowSuccess($"Switched to {(newType == "default" ? "bad words removal" : "buzzwords replacement")} mode");
            
            // Clear the processed text when switching dictionaries
            processedText = null;
            statistics = null;
        }
        catch (FileNotFoundException ex)
        {
            ToastService.ShowError($"Dictionary file not found: {ex.Message}", "Switch Error");
            Console.WriteLine($"Dictionary file not found: {ex.Message}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to switch dictionary type: {ex.Message}", "Switch Error");
            Console.WriteLine($"Error switching dictionary: {ex.Message}");
        }
    }

    private async Task ProcessText()
    {
        Console.WriteLine($"ProcessText called with input: {inputText}");
        if (string.IsNullOrWhiteSpace(inputText)) return;

        try
        {
            isProcessing = true;
            var progress = new Progress<double>();
            var result = await TextProcessingService.ProcessTextAsync(inputText, progress);
            processedText = result.ProcessedText;
            statistics = result.Statistics;

            if (statistics.ReplacedWordsCount > 0)
            {
                ToastService.ShowSuccess($"Successfully replaced {statistics.ReplacedWordsCount} inappropriate words.", "Processing Complete");
            }
            else
            {
                ToastService.ShowInfo("No inappropriate words found in the text.", "Processing Complete");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to process text. Please try again.", "Processing Error");
            Console.WriteLine($"Error processing text: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ExportText(string format)
    {
        if (processedText == null || statistics == null) return;

        try
        {
            var fileBytes = await ExportService.ExportToFileAsync(processedText, statistics, format);
            var fileName = format.ToLower() switch
            {
                "txt" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.txt",
                "html" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.html",
                "json" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.json",
                "csv" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.csv",
                "xml" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.xml",
                "md" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.md",
                "pdf" => $"cleaned_text_{DateTime.Now:yyyyMMdd_HHmmss}.pdf",
                _ => ExportService.GetDefaultFileName(format)
            };

            // Convert the byte array to a base64 string for downloading
            var base64 = Convert.ToBase64String(fileBytes);
            var mimeType = format.ToLower() switch
            {
                "txt" => "text/plain",
                "html" => "text/html",
                "json" => "application/json",
                "csv" => "text/csv",
                "xml" => "application/xml",
                "md" => "text/markdown",
                "pdf" => "application/pdf",
                _ => "text/plain"
            };

            // Use JSRuntime to trigger the file download
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, base64, mimeType);
            
            ToastService.ShowSuccess($"Successfully exported text as {format.ToUpper()}", "Export Complete");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to export text as {format.ToUpper()}", "Export Error");
            Console.WriteLine($"Error exporting text: {ex.Message}");
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        var file = e.File;

        // Validate file type
        var allowedTypes = new[] { ".txt", ".md" };
        var fileExtension = Path.GetExtension(file.Name)?.ToLowerInvariant();
        if (string.IsNullOrEmpty(fileExtension) || !allowedTypes.Contains(fileExtension))
        {
            ToastService.ShowError($"Invalid file type. Please upload a {string.Join(" or ", allowedTypes)} file.", "Upload Error");
            return;
        }

        // Validate file size
        if (file.Size > MaxFileSize)
        {
            ToastService.ShowError($"File exceeds the maximum size limit of {MaxFileSize / (1024 * 1024)}MB.", "Upload Error");
            return;
        }

        try
        {
            isProcessing = true; // Show loading indicator while reading
            await using var stream = file.OpenReadStream(MaxFileSize);
            using var reader = new StreamReader(stream);
            inputText = await reader.ReadToEndAsync();
            processedText = null; // Clear previous results
            statistics = null;    // Clear previous stats
            ToastService.ShowSuccess($"Successfully loaded '{file.Name}'.", "File Loaded");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error reading file: {ex.Message}", "Upload Error");
            Console.WriteLine($"Error reading file: {ex.Message}");
            inputText = string.Empty; // Clear input on error
        }
        finally
        {
            isProcessing = false;
            StateHasChanged(); // Ensure UI updates after async operation
        }
    }

    private async Task ShowBatchExportModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('batchExportModal')).show()");
    }

    private async Task ExportBatch()
    {
        if (processedText == null || statistics == null) return;

        var selectedFormatsList = selectedFormats.Where(x => x.Value).Select(x => x.Key).ToList();
        if (!selectedFormatsList.Any())
        {
            ToastService.ShowWarning("Please select at least one format for batch export.", "No Formats Selected");
            return;
        }

        isBatchExporting = true;
        StateHasChanged();

        try
        {
            var exports = new List<(string, TextStatistics, string)>
            {
                (processedText, statistics, "cleaned_text")
            };

            var zipBytes = await ExportService.ExportBatchToZipAsync(exports, selectedFormatsList);
            var fileName = $"text_analysis_batch_{DateTime.Now:yyyyMMdd_HHmmss}.zip";

            // Convert to base64 and trigger download
            var base64 = Convert.ToBase64String(zipBytes);
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64, "application/zip");

            ToastService.ShowSuccess($"Successfully exported {selectedFormatsList.Count} formats to ZIP file", "Batch Export Complete");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to create batch export", "Export Error");
            Console.WriteLine($"Error creating batch export: {ex.Message}");
        }
        finally
        {
            isBatchExporting = false;
            StateHasChanged();
        }
    }
}
